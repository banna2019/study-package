
top:
	输出中的各列：
	
		PID 	进程号
		USER 	进程所有者的名字.
		PR/PRI 	进程优先级
			ps中的PRI和to中的PR是相同的(priority叫做动态优先级)
			实用priority值表示PRI和PR值,或者叫动态优先级(优先级).

				在内核中,进程优先级的取值范围是通过一个宏定义的,这个宏的名称是MAX_PRIO,它的值为140.
				而这个值又是由另外两个值相加组成的,一个是代表nice值取值范围的NICE_WIDTH宏,另一个是代表实时进程(realtime)优先级范围的MAX_RT_PRIO宏.
					Linux实际上实现了140个优先级范围,取值范围是从0-139,这个值越小,优先级越高;nice值的-20到19,映射到实际的优先级范围是100-139.

				新产生进程的默认优先级被定义为：
					#define DEFAULT_PRIO   (MAX_RT_PRIO + NICE_WIDTH / 2)
					
		NI 		nice级别(取值范围是-20至19: 值越小,表示进程”优先级”越高,而值越大“优先级”越低)  nice值叫做静态优先级;用nice和renice命令来调整的优先级
		TIME 	进程使用的CPU时间总计,精确到1/100秒
		VIRT 	进程使用的虚拟内存总量,单位：kb. VIRT=SWAP+RES
		RES 	进程使用的、未被换出的物理内存大小,单位：kb. RES=CODE+DATA 
		SHARE 	和其它进程共享的内存,kb单位
		
		S 		进程状态：S=睡眠,R=运行,T=停止或跟踪,D=不可中断的睡眠,Z=僵尸.
		%CPU 	CPU使用量.
		%MEM 	物理内存用量
		COMMAND 进程的命令行启动命令(包括参数)

		备注(值计算参考):
			https://www.jianshu.com/p/f05b923855d7
		

	top常用的快捷键：
	
		t 关闭和开启进程汇总信息的展示
		m 关闭和开启内存信息的显示
		A 排序系统上各类资源的排序.对于快速找出系统上的性能问题的任务很有帮助.
		f 进入top的交互配置模式,对于给top设置特定的进程很有用.
		o 让你交互的选择top的排序.
		r 使用renice命令
		k 使用kill命令
		
		
		
		
vmstat
	vmstat显示关于进程,内存,页,块I/O,traps和CPU的信息.vmstat既可以展示平均值,也可以是实时数据.
	通过提供采样频率和采样时间就可以开启vmstat的采样模式.
	
		注意：考虑到采样模式中的短时高峰情况,把采样频率设置为一个较低的值可以避免这样的问题
		
	各列的含义：
		进程
		   r:等待执行时间的进程数
		   b:在不可中断睡眠中的进程数     
		内存
		   swpd：已使用的虚拟内存量     
		   free：空闲内存量     
		   buff：作为缓冲的内存     
		   cache：作缓存的内存     
		Swap
		   si：从交换分区写到内存的量     
		   so：从内存写到交换分区的大小     
		IO
		   bi：发往块设备的数目(blocks/s)     
		   bo：从块设备接收的块数目(blocks/s)    
		System
		   in：每秒钟的中断次数,包括时钟     
		   cs：每秒的上下文切换次数     
		CPU(总CPU时间的百分比)：
		   us：运行非内核代码的时间(用户时间,包括nice时间)     
		   sy：运行内核代码的时间(系统时间)
		   id：空闲时间,早先的Linux2.5.41版本,包含了I/O等待时间     
		   wa(IO-wait time)：CPU处于idle状态,因为所有正在运行的进程都在等待I/O操作完成,因此当前无可以调度的进程(早先的Linux2.5.41版本,这个值为0 );
		   st(stolen time)：CPU花费在执行系统上运行的虚拟机的时间
		
		vmstat常用的几个：
			-m 显示内核的内存使用(slabs)
			-a 显示活动和非活动的内存页
			-n 只显示一个标题行,如果vmstat运行在采样模式,并且使用输出到管道和文件的时候,这选项很有用.
				(例如,root# vmstat -n 2 10 间隔2秒采样一次,共收集10次数据)
			当使用-p {分区} 标志的时候,vmstat会显示I/O的统计.
				vmstat -n 2 10 -p /dev/xvda1
				
				
				
uptime
	uptime 命令可以用来查看服务器运行了多长时间,有多少用户登录在服务器上,以及服务器的平均负载.分别展示过去1分钟、5分钟和15分钟的系统瓶颈负载值.
	平均负载最理想的值是1,意味着每个进程可以直接使用CPU,没有发生CPU周期丢失.不同系统的负载有很大差别.对单处理器工作站来说,1或2的负载值是勉强可以接受的,而在多处理器服务器上,平均负载为8或者10的时候,系统依旧运行良好.
	使用uptime或许可以找出服务器或网络的问题.例如,当网络服务运行不佳时,你就可以用uptime命令查看系统负载情况.如果负载不高,问题可能出现在你的网络中,而不是服务器系统上.

		小提示：你可以使用w替代uptime.w也可以查看当前登录系统的用户,以及他们在做什么.
			
	command:
		uptime
		w
		
		
		
ps和pstree
	在系统分析中,ps和pstree是最基础的命令,ps有三种不同的命令选项,UNIX、BSD和GNU风格.来看看GNU风格的ps选项.
	ps命令展示所有进程列表.top命令展示了进程活动,而且ps显示的信息更加详细.ps所显示出来的进程数量取决于所使用的命令参数.
	简单的ps -A命令会列出所有的进程和他们各自的PID,可以使用PID做更多的事情.在使用pmap,renice等工具的时候,就需要用到PID.
	在运行java应用的服务器上,使用ps -A命令可能一下子就把显示器全部占满了,很难清楚查看运行进程的完整列表.
	在这个情况下,pstree命令可能就会派上用场,它把运行进程以树形结构展示,把子进程合并展示(例如java线程).
	pstree可以识别出原始进程.ps还有另外一个变种pgrep,也十分有用.


	命令选项：
		-e 所有进程,和-A一样
		-l 显示长格式
		-F 额外的全格式,包括参数和选项
		-H 显示进程等级
		-L 显示线程,可能带有LWP和NLWP列
		-m 在进程后面显示线程


	command:
		ps -A
		ps -elFL
		ps -eLF |grep -E "LWP|/usr/bin/docker-containerd"
		
		
	输出的字段含义:
		F 		进程标志
		S 		进程状态：S=睡眠,R=运行,T=停止或跟踪, D=不可中断的睡眠,Z=僵尸.
		UID 	拥有进程的用户名字.
		PID 	进程ID
		PPID 	父进程ID
		LWP 	LWP号(light weight process,or thread,轻量级进程,或线程).
		c 		处理器使用的百分比.
		NLWP 	进程中的lwps(线程)个数.
		PRI 	进程优先级
		NI 		nice级别(进程是否通过nice改变优先级,见下文)
		ADDR 	进程地址空间(例子中没展示)
		SZ 		进程使用的内存大小(代码+数据+栈),单位kb.
		WCHAN 	睡眠进程的内核函数名字,如果进程在运行,显示“-”,如果显示为“*”,则表示是多线程.
		RSS 	驻留内存大小,任务所使用的非swap物理内存大小,单位是kb.
		PSR 	分配给进程的处理器个数.
		STIME 	命令开始时间
		TTY 	终端
		TIME 	进程从启动开始,使用CPU的总时间
		CMD 	开启任务的命令(包含参数)
		
		
	pstree安装:
		1.在 Mac OS上
			brew install pstree

		2.在Fedora/Red Hat/CentOS
			  yum -y install psmisc

		3.在Ubuntu/Debian
			 apt-get install psmisc
			 
			 
		pstree参考博客: https://www.cnblogs.com/huchong/p/10065246.html
		
		
	

free
	free命令显示了系统所有已用和可用内存(包括swap)量.也包括被内核使用的缓冲和缓存信息
	使用free命令的时候,记住Linux内存架构和虚拟内存管理器的工作方式.空闲内存是受限使用的,使用swap也不表示出现了内存瓶颈
	
		图片(free-command-output.png)
		
	free命令的常用参数：
		-b,-k,-m,-g 以字节b,千字节kb,兆字节mb和吉字节gb为单位展示
		-l 显示详细的高低内存统计
		-c 输出free的次数
		
		
	command:
		free -l
		
		
	可以使用/proc/buddyinfo文件来决定每个区域中有多少个可用的内存块;每列数字意味着该列中可用的页数
		cat /proc/buddyinfo 	#查看伙伴系统




iostat
	iostat命令显示从系统启动依赖的平均CPU时间(和uptime类似).
	它会生成服务器磁盘子系统的活动报告：CPU和磁盘设备利用情况.
	使用iostat找出详细的I/O瓶颈,进行性能优化;iostat是sysstat包里的一个组件.
	
	
	CPU使用报告有4个部分：
		%user 显示CPU在用户级执行应用程序所花时间的百分比
		%nice 显示带有nice优先级的用户级程序占用的CPU时间百分比
		%sys  显示显示执行系统级(内核)任务所占用CPU时间的百分比
		%idle 显示CPU空闲的时间百分比
		
		
	设备使用报告包括如下部分：
		Device 块设备的名字
			tps 设备上的每秒传输次数(每秒的I/O请求数).多个单I/O请求可以合成一个传输请求,因为每个传输请求的大小可以是不一样的.
			
			Blk_read/s,Blk_wrtn/s: 每秒块读写显示了每秒从设备读或者写的数据.块也可以有不同的大小.
				常见的是1024,2048和4096字节,这是取决分区大小.例如,/dev/sda1的块大小可以计算:
					dumpe2fs -h /dev/xvda | grep -F "Block size"
		
		Blk_read，Blk_wrtn
			指示系统启动以来读和写的总块数.
			iostat有很多选项,在性能调试中最有用的是-x,它能显示扩展的统计信息
				iostat -d -x xvda1
				
		rrqm/s,wrqm/s
			每秒向设备发出的合并读写请求的数目.多个单一的读写请求可以合并为一个传输请求,因为传输请求的大小的可变的

		r/s,w/s 		设备上的每秒读/写请求次数.
		rsec/s,wsec/s 	设备上每秒的读/写扇区数.
		rkB/s,wkB/s 	每秒从设备上读取的kb数.
		avgrq-sz 		向设备发出的请求的平均大小,显示为扇区.
		avgqu-sz 		向设备发出的请求的平均队列长度
		await 			CPU执行系统任务的时间百分比
		svctm 			I/O请求的平均服务时间（毫秒）.
		%util 			I/O请求发出到设备的时间占用CPU的百分比(设备的带宽利用率).该值接近100%时,设备能力几乎饱和.
		
		
	command:
		iostat -d -x xvda1
