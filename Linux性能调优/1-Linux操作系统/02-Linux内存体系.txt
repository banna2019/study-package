
Linux内存体系:
	1.Linux的内存架构(虚拟内存)
		物理和虚拟内存:
			图片(linux-kernel-memory-layout-for-32bit-and-64bit-systems.png)
			
			Linux内核只能直接映射第一个GB的的物理内存(896M,因为还要考虑到保留的空间).在此上的内存被称作ZONE_NORMAL,这部分空间必须映射到最下面的1GB.
			这种映射对应用程序是完全透明的,但是分配内存页到ZONE_HIGHMEM会造成一点点性能损耗.
			另一方面,在64位系统上,例如在IA-64上面,ZONE_NORMAL一直延伸到64GB或者128GB.如你所见,把内存页从ZONE_HIGHMEM映射到ZONE_NORMAL这种损耗在64位系统上是不存在的
		
			虚拟内存寻址布局:
				图片(virtual-memory-addressing-layout-for-32bit-and64bit.png)
				
				在32位架构上,单个进程可以利用的最大地址空间是4GB,这是受到了32位虚拟内存映射的限制.在标准的32位环境中,虚拟地址被划分为3GB的用户空间和1GB的内存空间,现实中也存在一些4GB/4GB地址布局.
				再说64位架构,因为没有内存限制存在,每个进程能够都有可能使用巨大的地址空间
		
		
	2.虚拟内存管理器
		图片(linux-virtual-memory-manager.png)
		应用程序经常不是直接写入磁盘子系统,而是首先写入cache或者buffer,然后,
		在pdflush空闲的时候、或者某个文件大小超出buffer和cache的时候,由pdflush内核线程把buffer或cache中的数据写入磁盘
	
		
		页帧分配(Page frame allocation)
			页是物理内存或虚拟内存中一组连续的线性地址,Linux内核以页为单位处理内存,页的大小通常是4KB.当一个进程请求一定量的页面时,
			如果有可用的页面,内核会直接把这些页面分配给这个进程,否则,内核会从其它进程或者页缓存中拿来一部分给这个进程用.内核知道有多少页可用,也知道它们的位置

		伙伴系统(Buddy system)
			Linux内核使用名为伙伴系统(Buddy system)的机制维护空闲页,伙伴系统维护空闲页面,并且尝试给发来页面申请的进程分配页面,它还努力保持内存区域是连续的
				cat /proc/buddyinfo
				
		页帧回收
			如果在进程请求指定数量的内存页时没有可用的内存页,内核就会尝试释放特定的内存页(以前使用过,现在没有使用,并且基于某些原则仍然被标记为活动状态)给新的请求使用.
			这个过程叫做内存回收.kswapd内核线程和try_to_free_page()内核函数负责页面回收.
			
			图片(buddy-system.png)
		
			kswapd:
				kswapd通常在task interruptible状态下休眠,当一个区域中的空闲页低于阈值的时候,它就会被伙伴系统唤醒;
				它基于最近最少使用原则(LRU,Least Recently Used)在活动页中寻找可回收的页面.
				最近最少使用的页面被首先释放.它使用活动列表和非活动列表来维护候选页面.kswapd扫描活动列表,检查页面的近期使用情况,
				近期没有使用的页面被放入非活动列表中.
				
				vmstat -a	#查看有分别有多少内存被认为是活动和非活动状态.
		
			kswapd还要遵循另外一个原则:
				页面主要有两种用途：
					页面缓存(page cahe)和进程地址空间(process address space).
					页面缓存是指映射到磁盘文件的页面
					进程地址空间的页面(又叫做匿名内存,因为不是任何文件的映射,也没有名字)使用来做堆栈使用的.
					
					在回收内存时,kswapd更偏向于回收页面缓存.
					
					Page out和swap out：“page out”和“swap out”很容易混淆.“page out”意思是把一些页面(整个地址空间的一部分)交换到swap;"swap out"意味着把所有的地址空间交换到swap.
					如果大部分的页面缓存和进程地址空间来自于内存回收,在某些情况下,可能会影响性能.
					
						可以通过/proc/sys/vm/swappiness文件来控制这个行为:
							cat /proc/sys/vm/swappiness

		swap:
			在发生页面回收时,属于进程地址空间的处于非活动列表的候选页面会发生page out;
			在Linux中,如果虚拟内存管理器意识到内存页已经分配了,但是已经很久没有使用,它就把内存页移动到swap空间
			
	
		
		
