---

- include_tasks: it-Monitor-01.yml
  when: subnet_zone == "1a"

- include_tasks: it-Monitor-02.yml
  when: subnet_zone == "1b"

- include_tasks: it-Monitor-03.yml
  when: subnet_zone == "1c"

- name: "Remove old ec2 instances if 'deleteExisting' is true"
  ec2:
    key_name: "{{ ec2_key_Pair }}"
    region: "{{ ec2_instance_region }}"
    group_id: "{{ ec2_security_group_Id }}"
    instance_type: "{{ ec2_instance_type }}"
    image: "{{ ec2_ami_Id }}"
    wait: true
    exact_count: 0
    count_tag:
      Name: "{{ ec2_instance_tag_name }}"
    instance_tags:
      Name: "{{ ec2_instance_tag_name }}"
      env: "{{ ec2_env }}"
  when: deleteExisting or tear_down

- name: "Provision server"
  ec2:
    key_name: "{{ ec2_key_Pair }}"
    region: "{{ ec2_instance_region | default('ap-southeast-1') }}"
    group_id: "{{ ec2_security_group_Id }}"
    instance_type: "{{ ec2_instance_type | default('t2.micro') }}"
    image: "{{ ec2_ami_Id | default('ami-8e0205f2') }}"
    wait: true
    exact_count: "{{ ec2_server_count }}"
    count_tag:
      Name: "{{ ec2_instance_tag_name }}"
    instance_tags:
      Name: "{{ ec2_instance_tag_name }}"
      env: "{{ ec2_env }}"
    vpc_subnet_id: "{{ vpc_subnet_Id }}"
    private_ip: "{{ ec2_instance_private_Ip }}"
    assign_public_ip: yes
    instance_profile_name: "{{ ec2_instance_profile_name | default('') }}"
    termination_protection: yes
    volumes:
      - device_name: "{{ ec2_volume_Device_Name }}"
        volume_type: "{{ ec2_volume_type }}"
        volume_size: "{{ ec2_volume_Size }}"
        delete_on_termination: false
  register: ec2
  when: not deleteExisting

#- name: Add all instance public IPs to host group
#  add_host: 
#    hostname: "{{ item.private_ip }}"
#    groupname: "{{ app_name }}"
#  with_items: "{{ ec2.instances }}"
#  when: not tear_down
  
#- name: Add all existing instance public IPs to host group
#  add_host: 
#    hostname: "{{ item.private_ip }}"
#    greoupname: "{{ app_name }}"
#  with_items: "{{ ec2.tagged_instances }}"
#  when: not tear_down

- name: Wait for SSH to come up
  wait_for: 
    host: "{{ item.private_ip }}"
    port: 22
    delay: 60
    timeout: 1200
    search_regex: OpenSSH
    #state: started
  with_items: "{{ ec2.instances }}"
  when: not tear_down
