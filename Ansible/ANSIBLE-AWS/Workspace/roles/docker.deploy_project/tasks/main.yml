---
- include_tasks: 001-common.yml

- include_tasks: java-Vars.yml
  when: language == 'JAVA'

- include_tasks: php-Vars.yml
  when: language == 'PHP'

- name: Remove existing {{ docker_project_name }} container
  docker_container:
    name: "{{ docker_project_name }}"
    state: absent
  when: docker_project_remove_existing_container
  ignore_errors: yes

- name: Remove existing {{ docker_project_image }} image
  docker_image:
    name: "{{ registry_hostname }}/{{ registry_container }}"
    force: yes
    state: absent
  when: docker_project_remove_existing_container
  ignore_errors: yes

- name: Ensure docker volume mapping host directories exist
  file:
    state: directory
    path: "{{ item.split(':')[0] }}"
    mode: "{{ '0700' if item == docker_project_home else docker_project_directory_mode }}"
    owner: "{{ 'root' if item == docker_project_home else docker_project_directory_owner }}"
    group: "{{ 'root' if item == docker_project_home else docker_project_directory_group }}"
  with_items:
    - "{{ [ docker_project_home ] + docker_project_directory_volumes }}"
  when: (docker_project_directory_volumes | length > 0)

- name: Create config files
  copy:
    dest: "{{ item.dest }}"
    content: "{{ item.content }}"
  with_items: "{{ project_configs }}"

- name: Log into private registry and force re-authorization
  docker_login:
    registry: "{{ registry_hostname }}"
    username: "{{ registry_username }}"
    password: "{{ registry_password }}"
    reauthorize: yes
  when: registry_username != "" and registry_password != ""

- debug: var=docker_project_env

- name: Run docker project container
  docker_container:
    name: "{{ docker_project_name }}"
    image: "{{ docker_project_image }}"
    pull: "{{ docker_project_pull_image }}"
    restart_policy: always
    restart: "{{ docker_project_restart }}"
    command: "{{ docker_project_command }}"
    privileged: yes
    ports: "{{ docker_project_ports }}"
    network_mode: "{{ docker_project_network_mode }}"
    networks: "{{ docker_project_networks }}"
    env: "{{ docker_project_env }}"
    volumes: "{{ docker_project_volumes }}"
    log_driver: "{{ docker_project_log_driver }}"
    log_options: "{{ docker_project_log_options }}"
  when: project_is_h5api == 0

- name: Run docker h5api project container
  docker_container:
    name: "{{ docker_project_name }}"
    image: "{{ docker_project_image }}"
    pull: "{{ docker_project_pull_image }}"
    restart_policy: always
    restart: "{{ docker_project_restart }}"
    command: "{{ docker_project_command }}"
    privileged: yes
    ports:
      - "8080:8080"
      - "7070:7070"
    network_mode: "{{ docker_project_network_mode }}"
    networks: "{{ docker_project_networks }}"
    env: "{{ docker_project_env }}"
    volumes: "{{ docker_project_volumes }}"
    log_driver: "{{ docker_project_log_driver }}"
    log_options: "{{ docker_project_log_options }}"
  when: project_is_h5api == 1


